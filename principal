#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct {
    char nome[50];
    char simbolo; // 'X' ou 'O'
    int vitorias;
} Jogador;

typedef struct {
    char tabuleiro[3][3];
    Jogador *jogador1;
    Jogador *jogador2;
    int modoContraMaquina; // 0 para jogador vs jogador, 1 para jogador vs máquina
} JogoDaVelha;

void inicializarTabuleiro(JogoDaVelha *jogo) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            jogo->tabuleiro[i][j] = ' ';
        }
    }
}

void exibirTabuleiro(JogoDaVelha *jogo) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf(" %c ", jogo->tabuleiro[i][j]);
            if (j < 2) printf("|");
        }
        printf("\n");
        if (i < 2) printf("---|---|---\n");
    }
    printf("\n");
}

int verificarVencedor(JogoDaVelha *jogo) {
    // Verifica linhas, colunas e diagonais
    for (int i = 0; i < 3; i++) {
        if (jogo->tabuleiro[i][0] == jogo->tabuleiro[i][1] && jogo->tabuleiro[i][1] == jogo->tabuleiro[i][2] && jogo->tabuleiro[i][0] != ' ')
            return 1;
        if (jogo->tabuleiro[0][i] == jogo->tabuleiro[1][i] && jogo->tabuleiro[1][i] == jogo->tabuleiro[2][i] && jogo->tabuleiro[0][i] != ' ')
            return 1;
    }
    if (jogo->tabuleiro[0][0] == jogo->tabuleiro[1][1] && jogo->tabuleiro[1][1] == jogo->tabuleiro[2][2] && jogo->tabuleiro[0][0] != ' ')
        return 1;
    if (jogo->tabuleiro[0][2] == jogo->tabuleiro[1][1] && jogo->tabuleiro[1][1] == jogo->tabuleiro[2][0] && jogo->tabuleiro[0][2] != ' ')
        return 1;
    return 0;
}

void jogadaMaquina(JogoDaVelha *jogo) {
    int linha, coluna;
    do {
        linha = rand() % 3;
        coluna = rand() % 3;
    } while (jogo->tabuleiro[linha][coluna] != ' ');

    jogo->tabuleiro[linha][coluna] = jogo->jogador2->simbolo;
}

void jogarPartida(JogoDaVelha *jogo) {
    int turno = 0;
    int empate = 1;
    inicializarTabuleiro(jogo);
    Jogador *jogadorAtual = jogo->jogador1;

    while (turno < 9) {
        exibirTabuleiro(jogo);
        int linha, coluna;
        int resultado = 0;
        
        if (jogadorAtual == jogo->jogador2 && jogo->modoContraMaquina) {
            jogadaMaquina(jogo);
            printf("A máquina fez sua jogada.\n");
        } else {
            printf("%s, escolha a linha e coluna (0-2) para seu movimento: ", jogadorAtual->nome);
            resultado = scanf("%d %d", &linha, &coluna);

            if (resultado < 2) {  // Se o usuário inserir menos de dois valores
                printf("Jogada incompleta! Por favor, insira dois valores.\n");
                while (getchar() != '\n'); // Limpa o buffer de entrada
                continue; // Solicita novamente a entrada do usuário
            }

            if (linha >= 0 && linha < 3 && coluna >= 0 && coluna < 3 && jogo->tabuleiro[linha][coluna] == ' ') {
                jogo->tabuleiro[linha][coluna] = jogadorAtual->simbolo;
            } else {
                printf("Movimento inválido! Tente novamente.\n");
                continue;
            }
        }

        turno++;
        if (verificarVencedor(jogo)) {
            exibirTabuleiro(jogo);
            printf("%s vencedor!\n", jogadorAtual->nome);
            jogadorAtual->vitorias++;
            empate = 0;
            break;
        }
        jogadorAtual = (jogadorAtual == jogo->jogador1) ? jogo->jogador2 : jogo->jogador1;
    }

    if (empate) {
        printf("Empate!\n");
    }
}

void jogarMelhorDe(JogoDaVelha *jogo, int maxPartidas) {
    int partidas = 0;
    while (partidas < maxPartidas || (jogo->jogador1->vitorias == jogo->jogador2->vitorias)) {
        jogarPartida(jogo);
        partidas++;
        if (partidas >= maxPartidas && jogo->jogador1->vitorias != jogo->jogador2->vitorias) break;
    }

    if (jogo->jogador1->vitorias > jogo->jogador2->vitorias) {
        printf("%s é o vencedor parabens!\n", jogo->jogador1->nome);
    } else if (jogo->jogador2->vitorias > jogo->jogador1->vitorias) {
        printf("%s é o vencedor parabens!\n", jogo->jogador2->nome);
    } else {
        printf("O jogo terminou em empate!\n");
    }
}

void limparTela() {
    #ifdef _WIN32
        system("cls");  // Comando para limpar a tela no Windows
    #else
        system("clear");  // Comando para limpar a tela no Linux e macOS
    #endif
}

void areaDeJogo(JogoDaVelha *jogo) {
    limparTela();  // Limpa a tela antes de exibir a área de jogo
    int opcaoJogo = 0;
    int maxPartidas = 1;

    printf("Área de Jogo:\n");
    printf("1. Uma Partida\n");
    printf("2. Melhor de 3\n");
    printf("3. Melhor de 5\n");
    printf("Escolha uma opção: \n");
    scanf("%d", &opcaoJogo);

    switch(opcaoJogo) {
        case 1:
            maxPartidas = 1;
            break;
        case 2:
            maxPartidas = 3;
            break;
        case 3:
            maxPartidas = 5;
            break;
        default:
            printf("Opção inválida! Voltando ao menu principal.\n");
            return;
    }
    
    limparTela();  // Limpa a tela antes de exibir a área de jogo
    
    printf("Escolha o modo de jogo:\n");
    printf("1. Contra outro jogador\n");
    printf("2. Contra a máquina\n");
    printf("Escolha uma opção>> \n");
    
    scanf("%d", &jogo->modoContraMaquina);
    limparTela();  // Limpa a tela antes de exibir a área de jogo
    
    if (jogo->modoContraMaquina == 1) {
        jogo->modoContraMaquina = 0; // Jogador vs Jogador
    } else if (jogo->modoContraMaquina == 2) {
        jogo->modoContraMaquina = 1; // Jogador vs Máquina
    } else {
        printf("Opção inválida! Voltando ao menu principal.\n");
        return;
    }

    jogarMelhorDe(jogo, maxPartidas);
}

void menu(JogoDaVelha *jogo) {
    limparTela();  // Limpa a tela antes de exibir a área de jogo
    int opcao = 0;
    while (opcao != 2) {
        printf("Menu:\n");
        printf("1. Área de Jogo\n");
        printf("2. Sair\n");
        printf("Escolha uma opção>> ");
        scanf("%d", &opcao);

        if (opcao == 1) {
            areaDeJogo(jogo);
        } else if (opcao != 2) {
            printf("Opção inválida! Tente novamente.\n");
        }
    }
}

int main() {
    srand(time(NULL)); // Inicializa a semente do gerador de números aleatórios

    JogoDaVelha jogo;
    Jogador jogador1 = {"Jogador 1", 'X', 0};
    Jogador jogador2 = {"Jogador 2", 'O', 0};

    jogo.jogador1 = &jogador1;
    jogo.jogador2 = &jogador2;

    menu(&jogo);

    return 0;
}
